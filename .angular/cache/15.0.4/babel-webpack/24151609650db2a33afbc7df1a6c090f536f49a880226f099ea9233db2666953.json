{"ast":null,"code":"import { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction isAngularInTestMode() {\n  // This is safe to check for these properties in the following way since `typeof` does not\n  // throw an exception if the value does not exist in the scope.\n  // We should not try to read these values from the global scope (e.g. `ɵglobal` from the `@angular/core`).\n  // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\n  // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\n  // this will return undefined `global.jest`, but `jest` will not equal undefined.\n  return typeof __karma__ !== 'undefined' || typeof jasmine !== 'undefined' || typeof jest !== 'undefined' || typeof Mocha !== 'undefined';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet NgxsBootstrapper = /*#__PURE__*/(() => {\n  class NgxsBootstrapper {\n    constructor() {\n      /**\n       * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n       */\n      this.bootstrap$ = new ReplaySubject(1);\n    }\n    /**\n     * @return {?}\n     */\n    get appBootstrapped$() {\n      return this.bootstrap$.asObservable();\n    }\n    /**\n     * This event will be emitted after attaching `ComponentRef` of the root component\n     * to the tree of views, that's a signal that application has been fully rendered\n     * @return {?}\n     */\n    bootstrap() {\n      this.bootstrap$.next(true);\n      this.bootstrap$.complete();\n    }\n  }\n  NgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {\n    return new (t || NgxsBootstrapper)();\n  };\n  NgxsBootstrapper.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgxsBootstrapper,\n    factory: NgxsBootstrapper.ɵfac\n  });\n  return NgxsBootstrapper;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nif (false) {\n  /**\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n   * @type {?}\n   * @private\n   */\n  NgxsBootstrapper.prototype.bootstrap$;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n/**\n * @param {?} equalityCheck\n * @param {?} prev\n * @param {?} next\n * @return {?}\n */\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  /** @type {?} */\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n * @template T\n * @param {?} func\n * @param {?=} equalityCheck\n * @return {?}\n */\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n  /** @type {?} */\n  let lastArgs = null;\n  /** @type {?} */\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  /**\n   * @return {?}\n   */\n  function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = /** @type {?} */func.apply(null, arguments);\n    }\n    lastArgs = arguments;\n    return lastResult;\n  }\n  /** @type {?} */memoized.reset =\n  /**\n  * @return {?}\n  */\n  function () {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n  return (/** @type {?} */memoized\n  );\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN');\nlet InitialState = /*#__PURE__*/(() => {\n  class InitialState {\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    static set(state) {\n      this.value = state;\n    }\n    /**\n     * @return {?}\n     */\n    static pop() {\n      /** @type {?} */\n      const state = this.value;\n      this.value = {};\n      return state;\n    }\n  }\n  InitialState.value = {};\n  return InitialState;\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InitialState.value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\nconst NGXS_STATE_CONTEXT_FACTORY = new InjectionToken('Internals.StateContextFactory');\n/**\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\nconst NGXS_STATE_FACTORY = new InjectionToken('Internals.StateFactory');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper, isAngularInTestMode, memoize };\n\n//# sourceMappingURL=ngxs-store-internals.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}