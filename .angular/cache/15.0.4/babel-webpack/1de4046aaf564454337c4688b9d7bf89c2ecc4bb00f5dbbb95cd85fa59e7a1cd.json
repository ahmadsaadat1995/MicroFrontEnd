{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { State, Action, Selector } from '@ngxs/store';\nimport { AddUser, RemoveUser } from '../actions/user.action';\nimport * as i0 from \"@angular/core\";\nexport class UserStateModel {}\n/**\r\n * The UserState\r\n */\nlet UserState = class UserState {\n  /**\r\n   * Selector to get users from the application state\r\n   * @param state: the application state\r\n   */\n  static getUsers(state) {\n    return state.users;\n  }\n  /**\r\n   * Add an user to the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\n  add({\n    getState,\n    patchState,\n    setState\n  }, {\n    payload\n  }) {\n    const state = getState();\n    if (state && state.users) {\n      patchState({\n        users: [...state.users, payload]\n      });\n    } else {\n      setState({\n        users: [payload]\n      });\n    }\n  }\n  /**\r\n   * Remove an user from the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\n  remove({\n    getState,\n    setState\n  }, {\n    payload\n  }) {\n    const state = getState();\n    if (state && state.users) {\n      setState({\n        users: state.users.filter(u => !(u.email === payload.email && u.name === payload.name))\n      });\n    }\n  }\n};\nUserState.ɵfac = function UserState_Factory(t) {\n  return new (t || UserState)();\n};\nUserState.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserState,\n  factory: UserState.ɵfac\n});\n__decorate([Action(AddUser)], UserState.prototype, \"add\", null);\n__decorate([Action(RemoveUser)], UserState.prototype, \"remove\", null);\n__decorate([Selector()], UserState, \"getUsers\", null);\nUserState = __decorate([State({\n  name: 'users',\n  defaults: {\n    users: []\n  }\n})], UserState);\nexport { UserState };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}