{"ast":null,"code":"import { buildRoutes } from '../utils/route-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let MicrofrontendService = /*#__PURE__*/(() => {\n  class MicrofrontendService {\n    constructor(router) {\n      this.router = router;\n    }\n    /*\r\n     * Initialize is called on app startup to load the initial list of\r\n     * remote microfrontends and configure them within the router\r\n     */\n    initialise() {\n      return new Promise((resolve, reject) => {\n        this.microfrontends = this.loadConfig();\n        this.router.resetConfig(buildRoutes(this.microfrontends));\n        resolve();\n      });\n    }\n    /*\r\n     * This is just an hardcoded list of remote microfrontends, but could easily be updated\r\n     * to load the config from a database or external file\r\n     */\n    loadConfig() {\n      return [{\n        // For Loading\n        remoteEntry: 'http://localhost:4201/remoteEntry.js',\n        remoteName: 'profile',\n        exposedModule: 'ProfileModule',\n        // For Routing, enabling us to ngFor over the microfrontends and dynamically create links for the routes\n        displayName: 'Profile',\n        routePath: 'profile',\n        ngModuleName: 'ProfileModule'\n      }, {\n        // For Loading\n        remoteEntry: 'http://localhost:3158/remoteEntry.js',\n        remoteName: 'personneli',\n        exposedModule: 'personneliModule',\n        // For Routing, enabling us to ngFor over the microfrontends and dynamically create links for the routes\n        displayName: 'personneli',\n        routePath: 'personneli',\n        ngModuleName: 'personneliModule'\n      }];\n    }\n  }\n  MicrofrontendService.ɵfac = function MicrofrontendService_Factory(t) {\n    return new (t || MicrofrontendService)(i0.ɵɵinject(i1.Router));\n  };\n  MicrofrontendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MicrofrontendService,\n    factory: MicrofrontendService.ɵfac,\n    providedIn: 'root'\n  });\n  return MicrofrontendService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}