{"ast":null,"code":"import _asyncToGenerator from \"C:/sources/module-federation-examples/angular15-microfrontends-lazy-components/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst moduleMap = {};\nfunction loadRemoteEntry(remoteEntry) {\n  return new Promise((resolve, reject) => {\n    if (moduleMap[remoteEntry]) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = remoteEntry;\n    script.onerror = reject;\n    script.onload = () => {\n      moduleMap[remoteEntry] = true;\n      resolve(); // window is the global namespace\n    };\n\n    document.body.append(script);\n  });\n}\nfunction lookupExposedModule(_x, _x2) {\n  return _lookupExposedModule.apply(this, arguments);\n}\nfunction _lookupExposedModule() {\n  _lookupExposedModule = _asyncToGenerator(function* (remoteName, exposedModule) {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    yield __webpack_init_sharing__('default');\n    const container = window[remoteName]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    yield container.init(__webpack_share_scopes__.default);\n    const factory = yield container.get(exposedModule);\n    const Module = factory();\n    return Module;\n  });\n  return _lookupExposedModule.apply(this, arguments);\n}\nexport function loadRemoteModule(_x3) {\n  return _loadRemoteModule.apply(this, arguments);\n}\nfunction _loadRemoteModule() {\n  _loadRemoteModule = _asyncToGenerator(function* (options) {\n    yield loadRemoteEntry(options.remoteEntry);\n    return yield lookupExposedModule(options.remoteName, options.exposedModule);\n  });\n  return _loadRemoteModule.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}