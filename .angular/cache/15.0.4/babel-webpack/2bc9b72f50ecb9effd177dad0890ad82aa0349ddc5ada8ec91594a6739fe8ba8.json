{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild, ViewContainerRef, ɵcreateInjector } from '@angular/core';\nimport { loadRemoteModule } from '../../../utils/federation-utils';\nlet FederatedComponent = class FederatedComponent {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  ngOnInit() {\n    loadRemoteModule({\n      remoteEntry: this.remoteEntry,\n      remoteName: this.remoteName,\n      exposedModule: this.exposedModule\n    }).then(federated => {\n      const {\n        instance\n      } = this.federatedComponent.createComponent(federated[this.exposedModule].exports.find(e => e.ɵcmp?.exportAs[0] === this.componentName), {\n        injector: ɵcreateInjector(federated[this.exposedModule], this.injector)\n      });\n    });\n  }\n};\n__decorate([ViewChild('federatedComponent', {\n  read: ViewContainerRef\n})], FederatedComponent.prototype, \"federatedComponent\", void 0);\n__decorate([Input()], FederatedComponent.prototype, \"remoteEntry\", void 0);\n__decorate([Input()], FederatedComponent.prototype, \"remoteName\", void 0);\n__decorate([Input()], FederatedComponent.prototype, \"exposedModule\", void 0);\n__decorate([Input()], FederatedComponent.prototype, \"componentName\", void 0);\nFederatedComponent = __decorate([Component({\n  selector: 'federated-component',\n  templateUrl: './federated.component.html',\n  styleUrls: ['./federated.component.scss']\n})], FederatedComponent);\nexport { FederatedComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}