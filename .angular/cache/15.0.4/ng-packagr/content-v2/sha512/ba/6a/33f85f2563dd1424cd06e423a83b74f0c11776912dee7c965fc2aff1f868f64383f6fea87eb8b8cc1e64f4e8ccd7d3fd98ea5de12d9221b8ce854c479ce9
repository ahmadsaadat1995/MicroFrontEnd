{"hash":"6a1f92f106865e5913ca2b4cf006b74299996965","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { Action, Selector, State } from '@ngxs/store';\n\nclass MdmfSharedService {\r\n    constructor() { }\r\n}\r\nMdmfSharedService.ɵfac = function MdmfSharedService_Factory(t) { return new (t || MdmfSharedService)(); };\r\nMdmfSharedService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MdmfSharedService, factory: MdmfSharedService.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root',\r\n            }]\r\n    }], function () { return []; }, null); })();\n\nclass MdmfSharedComponent {\r\n    constructor() { }\r\n    ngOnInit() { }\r\n}\r\nMdmfSharedComponent.ɵfac = function MdmfSharedComponent_Factory(t) { return new (t || MdmfSharedComponent)(); };\r\nMdmfSharedComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MdmfSharedComponent, selectors: [[\"lib-mdmf-shared\"]], decls: 4, vars: 0, template: function MdmfSharedComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"h2\");\r\n        i0.ɵɵtext(1, \"Component from shared module\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(2, \"p\");\r\n        i0.ɵɵtext(3, \" mdmf-shared works!\\n\");\r\n        i0.ɵɵelementEnd();\r\n    } }, styles: [\"h2[_ngcontent-%COMP%]{color:#5f9ea0;background-color:#ff0}\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'lib-mdmf-shared', template: \"<h2>Component from shared module</h2>\\r\\n<p>\\r\\n    mdmf-shared works!\\r\\n</p>\\r\\n    \\r\\n    \\r\\n\", styles: [\"h2{color:#5f9ea0;background-color:#ff0}\\n\"] }]\r\n    }], function () { return []; }, null); })();\n\nclass MdmfSharedModule {\r\n}\r\nMdmfSharedModule.ɵfac = function MdmfSharedModule_Factory(t) { return new (t || MdmfSharedModule)(); };\r\nMdmfSharedModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MdmfSharedModule });\r\nMdmfSharedModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                // declarations: [MdmfSharedComponent, ListUserComponent],\r\n                declarations: [MdmfSharedComponent],\r\n                imports: [CommonModule],\r\n                // exports: [MdmfSharedComponent, ListUserComponent]\r\n                exports: [MdmfSharedComponent],\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MdmfSharedModule, { declarations: [MdmfSharedComponent], imports: [CommonModule], exports: [MdmfSharedComponent] }); })();\n\n/**\r\n * Action to add an user\r\n */\r\nclass AddUser {\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nAddUser.type = '[User] Add';\r\n/**\r\n * Action to remove an user\r\n */\r\nclass RemoveUser {\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nRemoveUser.type = '[User] Remove';\n\nclass UserStateModel {\r\n}\r\n/**\r\n * The UserState\r\n */\r\nlet UserState = class UserState {\r\n    /**\r\n     * Selector to get users from the application state\r\n     * @param state: the application state\r\n     */\r\n    static getUsers(state) {\r\n        return state.users;\r\n    }\r\n    /**\r\n     * Add an user to the application state\r\n     *\r\n     * @param param0: state context\r\n     * @param param1: playload of AddUser action\r\n     */\r\n    add({ getState, patchState, setState }, { payload }) {\r\n        const state = getState();\r\n        if (state && state.users) {\r\n            patchState({\r\n                users: [...state.users, payload],\r\n            });\r\n        }\r\n        else {\r\n            setState({\r\n                users: [payload],\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Remove an user from the application state\r\n     *\r\n     * @param param0: state context\r\n     * @param param1: playload of AddUser action\r\n     */\r\n    remove({ getState, setState }, { payload }) {\r\n        const state = getState();\r\n        if (state && state.users) {\r\n            setState({\r\n                users: state.users.filter(u => !(u.email === payload.email && u.name === payload.name)),\r\n            });\r\n        }\r\n    }\r\n};\r\nUserState.ɵfac = function UserState_Factory(t) { return new (t || UserState)(); };\r\nUserState.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserState, factory: UserState.ɵfac });\r\n__decorate([\r\n    Action(AddUser)\r\n], UserState.prototype, \"add\", null);\r\n__decorate([\r\n    Action(RemoveUser)\r\n], UserState.prototype, \"remove\", null);\r\n__decorate([\r\n    Selector()\r\n], UserState, \"getUsers\", null);\r\nUserState = __decorate([\r\n    State({\r\n        name: 'users',\r\n        defaults: {\r\n            users: [],\r\n        },\r\n    })\r\n], UserState);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserState, [{\r\n        type: Injectable\r\n    }], null, { add: [], remove: [] }); })();\n\n/*\r\n * Public API Surface of mdmf-shared\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AddUser, MdmfSharedComponent, MdmfSharedModule, MdmfSharedService, RemoveUser, UserState, UserStateModel };\n//# sourceMappingURL=mdmf-shared.mjs.map\n//# sourceMappingURL=mdmf-shared.mjs.map\n","map":{"version":3,"file":"mdmf-shared.mjs","sources":["../../../projects/mdmf-shared/src/lib/services/mdmf-shared.service.ts","../../../projects/mdmf-shared/src/lib/components/mdmf-shared.component.ts","../../../projects/mdmf-shared/src/lib/components/mdmf-shared.component.html","../../../projects/mdmf-shared/src/lib/modules/mdmf-shared.module.ts","../../../projects/mdmf-shared/src/lib/app-state/actions/user.action.ts","../../../projects/mdmf-shared/src/lib/app-state/state/user.state.ts","../../../projects/mdmf-shared/src/public-api.ts","../../../projects/mdmf-shared/src/mdmf-shared.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MdmfSharedService {\r\n  constructor() {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-mdmf-shared',\r\n  templateUrl: './mdmf-shared.component.html',\r\n  styleUrls: ['./mdmf-shared.component.css'],\r\n})\r\nexport class MdmfSharedComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<h2>Component from shared module</h2>\r\n<p>\r\n    mdmf-shared works!\r\n</p>\r\n    \r\n    \r\n","import { NgModule } from '@angular/core';\r\nimport { MdmfSharedComponent } from '../components/mdmf-shared.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  // declarations: [MdmfSharedComponent, ListUserComponent],\r\n  declarations: [MdmfSharedComponent],\r\n  imports: [CommonModule],\r\n  // exports: [MdmfSharedComponent, ListUserComponent]\r\n  exports: [MdmfSharedComponent],\r\n})\r\nexport class MdmfSharedModule {}\r\n","import { User } from '../models/User';\r\n\r\n/**\r\n * Action to add an user\r\n */\r\nexport class AddUser {\r\n  static readonly type = '[User] Add';\r\n\r\n  constructor(public payload: User) {}\r\n}\r\n\r\n/**\r\n * Action to remove an user\r\n */\r\nexport class RemoveUser {\r\n  static readonly type = '[User] Remove';\r\n\r\n  constructor(public payload: User) {}\r\n}\r\n","import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { User } from '../models/User';\r\nimport { AddUser, RemoveUser } from '../actions/user.action';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class UserStateModel {\r\n  users: User[];\r\n}\r\n\r\n/**\r\n * The UserState\r\n */\r\n@State<UserStateModel>({\r\n  name: 'users',\r\n  defaults: {\r\n    users: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class UserState {\r\n  /**\r\n   * Selector to get users from the application state\r\n   * @param state: the application state\r\n   */\r\n  @Selector()\r\n  static getUsers(state: UserStateModel): User[] {\r\n    return state.users;\r\n  }\r\n\r\n  /**\r\n   * Add an user to the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\r\n  @Action(AddUser)\r\n  add(\r\n    { getState, patchState, setState }: StateContext<UserStateModel>,\r\n    { payload }: AddUser,\r\n  ): void {\r\n    const state = getState();\r\n    if (state && state.users) {\r\n      patchState({\r\n        users: [...state.users, payload],\r\n      });\r\n    } else {\r\n      setState({\r\n        users: [payload],\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an user from the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\r\n  @Action(RemoveUser)\r\n  remove({ getState, setState }: StateContext<UserStateModel>, { payload }: AddUser): void {\r\n    const state = getState();\r\n    if (state && state.users) {\r\n      setState({\r\n        users: state.users.filter(u => !(u.email === payload.email && u.name === payload.name)),\r\n      });\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of mdmf-shared\r\n */\r\n\r\nexport * from './lib/services/mdmf-shared.service';\r\nexport * from './lib/components/mdmf-shared.component';\r\nexport * from './lib/modules/mdmf-shared.module';\r\nexport * from './lib/app-state/actions/user.action';\r\nexport * from './lib/app-state/models/User';\r\nexport * from './lib/app-state/state/user.state';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { Action, Selector, State } from '@ngxs/store';\n\nclass MdmfSharedService {\r\n    constructor() { }\r\n}\r\nMdmfSharedService.ɵfac = function MdmfSharedService_Factory(t) { return new (t || MdmfSharedService)(); };\r\nMdmfSharedService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MdmfSharedService, factory: MdmfSharedService.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedService, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], function () { return []; }, null);\r\n})();\n\nclass MdmfSharedComponent {\r\n    constructor() { }\r\n    ngOnInit() { }\r\n}\r\nMdmfSharedComponent.ɵfac = function MdmfSharedComponent_Factory(t) { return new (t || MdmfSharedComponent)(); };\r\nMdmfSharedComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MdmfSharedComponent, selectors: [[\"lib-mdmf-shared\"]], decls: 4, vars: 0, template: function MdmfSharedComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵelementStart(0, \"h2\");\r\n            i0.ɵɵtext(1, \"Component from shared module\");\r\n            i0.ɵɵelementEnd();\r\n            i0.ɵɵelementStart(2, \"p\");\r\n            i0.ɵɵtext(3, \" mdmf-shared works!\\n\");\r\n            i0.ɵɵelementEnd();\r\n        }\r\n    }, styles: [\"h2[_ngcontent-%COMP%]{color:#5f9ea0;background-color:#ff0}\"] });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-mdmf-shared', template: \"<h2>Component from shared module</h2>\\r\\n<p>\\r\\n    mdmf-shared works!\\r\\n</p>\\r\\n    \\r\\n    \\r\\n\", styles: [\"h2{color:#5f9ea0;background-color:#ff0}\\n\"] }]\r\n        }], function () { return []; }, null);\r\n})();\n\nclass MdmfSharedModule {\r\n}\r\nMdmfSharedModule.ɵfac = function MdmfSharedModule_Factory(t) { return new (t || MdmfSharedModule)(); };\r\nMdmfSharedModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MdmfSharedModule });\r\nMdmfSharedModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdmfSharedModule, [{\r\n            type: NgModule,\r\n            args: [{\r\n                    // declarations: [MdmfSharedComponent, ListUserComponent],\r\n                    declarations: [MdmfSharedComponent],\r\n                    imports: [CommonModule],\r\n                    // exports: [MdmfSharedComponent, ListUserComponent]\r\n                    exports: [MdmfSharedComponent],\r\n                }]\r\n        }], null, null);\r\n})();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MdmfSharedModule, { declarations: [MdmfSharedComponent], imports: [CommonModule], exports: [MdmfSharedComponent] }); })();\n\n/**\r\n * Action to add an user\r\n */\r\nclass AddUser {\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nAddUser.type = '[User] Add';\r\n/**\r\n * Action to remove an user\r\n */\r\nclass RemoveUser {\r\n    constructor(payload) {\r\n        this.payload = payload;\r\n    }\r\n}\r\nRemoveUser.type = '[User] Remove';\n\nclass UserStateModel {\r\n}\r\n/**\r\n * The UserState\r\n */\r\nlet UserState = class UserState {\r\n    /**\r\n     * Selector to get users from the application state\r\n     * @param state: the application state\r\n     */\r\n    static getUsers(state) {\r\n        return state.users;\r\n    }\r\n    /**\r\n     * Add an user to the application state\r\n     *\r\n     * @param param0: state context\r\n     * @param param1: playload of AddUser action\r\n     */\r\n    add({ getState, patchState, setState }, { payload }) {\r\n        const state = getState();\r\n        if (state && state.users) {\r\n            patchState({\r\n                users: [...state.users, payload],\r\n            });\r\n        }\r\n        else {\r\n            setState({\r\n                users: [payload],\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Remove an user from the application state\r\n     *\r\n     * @param param0: state context\r\n     * @param param1: playload of AddUser action\r\n     */\r\n    remove({ getState, setState }, { payload }) {\r\n        const state = getState();\r\n        if (state && state.users) {\r\n            setState({\r\n                users: state.users.filter(u => !(u.email === payload.email && u.name === payload.name)),\r\n            });\r\n        }\r\n    }\r\n};\r\nUserState.ɵfac = function UserState_Factory(t) { return new (t || UserState)(); };\r\nUserState.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserState, factory: UserState.ɵfac });\r\n__decorate([\r\n    Action(AddUser)\r\n], UserState.prototype, \"add\", null);\r\n__decorate([\r\n    Action(RemoveUser)\r\n], UserState.prototype, \"remove\", null);\r\n__decorate([\r\n    Selector()\r\n], UserState, \"getUsers\", null);\r\nUserState = __decorate([\r\n    State({\r\n        name: 'users',\r\n        defaults: {\r\n            users: [],\r\n        },\r\n    })\r\n], UserState);\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserState, [{\r\n            type: Injectable\r\n        }], null, { add: [], remove: [] });\r\n})();\n\n/*\r\n * Public API Surface of mdmf-shared\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AddUser, MdmfSharedComponent, MdmfSharedModule, MdmfSharedService, RemoveUser, UserState, UserStateModel };\n//# sourceMappingURL=mdmf-shared.mjs.map\n//# sourceMappingURL=mdmf-shared.mjs.map\n","map":{"version":3,"file":"mdmf-shared.mjs","sources":["../../../projects/mdmf-shared/src/lib/services/mdmf-shared.service.ts","../../../projects/mdmf-shared/src/lib/components/mdmf-shared.component.ts","../../../projects/mdmf-shared/src/lib/components/mdmf-shared.component.html","../../../projects/mdmf-shared/src/lib/modules/mdmf-shared.module.ts","../../../projects/mdmf-shared/src/lib/app-state/actions/user.action.ts","../../../projects/mdmf-shared/src/lib/app-state/state/user.state.ts","../../../projects/mdmf-shared/src/public-api.ts","../../../projects/mdmf-shared/src/mdmf-shared.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MdmfSharedService {\r\n  constructor() {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-mdmf-shared',\r\n  templateUrl: './mdmf-shared.component.html',\r\n  styleUrls: ['./mdmf-shared.component.css'],\r\n})\r\nexport class MdmfSharedComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<h2>Component from shared module</h2>\r\n<p>\r\n    mdmf-shared works!\r\n</p>\r\n    \r\n    \r\n","import { NgModule } from '@angular/core';\r\nimport { MdmfSharedComponent } from '../components/mdmf-shared.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  // declarations: [MdmfSharedComponent, ListUserComponent],\r\n  declarations: [MdmfSharedComponent],\r\n  imports: [CommonModule],\r\n  // exports: [MdmfSharedComponent, ListUserComponent]\r\n  exports: [MdmfSharedComponent],\r\n})\r\nexport class MdmfSharedModule {}\r\n","import { User } from '../models/User';\r\n\r\n/**\r\n * Action to add an user\r\n */\r\nexport class AddUser {\r\n  static readonly type = '[User] Add';\r\n\r\n  constructor(public payload: User) {}\r\n}\r\n\r\n/**\r\n * Action to remove an user\r\n */\r\nexport class RemoveUser {\r\n  static readonly type = '[User] Remove';\r\n\r\n  constructor(public payload: User) {}\r\n}\r\n","import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { User } from '../models/User';\r\nimport { AddUser, RemoveUser } from '../actions/user.action';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class UserStateModel {\r\n  users: User[];\r\n}\r\n\r\n/**\r\n * The UserState\r\n */\r\n@State<UserStateModel>({\r\n  name: 'users',\r\n  defaults: {\r\n    users: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class UserState {\r\n  /**\r\n   * Selector to get users from the application state\r\n   * @param state: the application state\r\n   */\r\n  @Selector()\r\n  static getUsers(state: UserStateModel): User[] {\r\n    return state.users;\r\n  }\r\n\r\n  /**\r\n   * Add an user to the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\r\n  @Action(AddUser)\r\n  add(\r\n    { getState, patchState, setState }: StateContext<UserStateModel>,\r\n    { payload }: AddUser,\r\n  ): void {\r\n    const state = getState();\r\n    if (state && state.users) {\r\n      patchState({\r\n        users: [...state.users, payload],\r\n      });\r\n    } else {\r\n      setState({\r\n        users: [payload],\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove an user from the application state\r\n   *\r\n   * @param param0: state context\r\n   * @param param1: playload of AddUser action\r\n   */\r\n  @Action(RemoveUser)\r\n  remove({ getState, setState }: StateContext<UserStateModel>, { payload }: AddUser): void {\r\n    const state = getState();\r\n    if (state && state.users) {\r\n      setState({\r\n        users: state.users.filter(u => !(u.email === payload.email && u.name === payload.name)),\r\n      });\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of mdmf-shared\r\n */\r\n\r\nexport * from './lib/services/mdmf-shared.service';\r\nexport * from './lib/components/mdmf-shared.component';\r\nexport * from './lib/modules/mdmf-shared.module';\r\nexport * from './lib/app-state/actions/user.action';\r\nexport * from './lib/app-state/models/User';\r\nexport * from './lib/app-state/state/user.state';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}